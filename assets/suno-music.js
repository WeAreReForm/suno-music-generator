/**
 * Suno Music Generator - JavaScript Interface v1.10.4
 * Protection anti-boucle et am√©liorations UX
 */

jQuery(document).ready(function($) {
    let currentTaskId = null;
    let statusCheckInterval = null;
    let checkCount = 0; // Compteur de v√©rifications pour protection anti-boucle
    const maxChecks = 20; // Limite de s√©curit√© v1.10.4
    
    // Console de debug pour v1.10.4
    function debugLog(message, data = null) {
        if (window.console && console.log) {
            console.log(`[Suno v1.10.4] ${message}`, data || '');
        }
    }
    
    debugLog('Plugin Suno Music Generator v1.10.4 initialis√© avec protection anti-boucle');
    
    // Soumission du formulaire
    $('#music-generation-form').on('submit', function(e) {
        e.preventDefault();
        
        debugLog('D√©but de g√©n√©ration avec protection anti-boucle');
        
        const formData = {
            action: 'generate_music',
            nonce: suno_ajax.nonce,
            prompt: $('#music-prompt').val(),
            style: $('#music-style').val(),
            title: $('#music-title').val(),
            lyrics: $('#music-lyrics').val(),
            instrumental: $('#instrumental').is(':checked')
        };
        
        // Validation am√©lior√©e
        if (!formData.prompt.trim()) {
            showValidationError('Veuillez saisir une description de la chanson');
            return;
        }
        
        if (formData.prompt.length > 500) {
            showValidationError('La description est trop longue (500 caract√®res maximum)');
            return;
        }
        
        // R√©initialiser les compteurs pour nouvelle g√©n√©ration
        checkCount = 0;
        
        // Afficher le statut de g√©n√©ration avec protection
        showGenerationStatus();
        updateStatusText('Envoi de la requ√™te...');
        updateProtectionCounter(0);
        
        // D√©sactiver le formulaire
        toggleFormState(false);
        
        // Appel AJAX
        $.post(suno_ajax.ajax_url, formData)
            .done(function(response) {
                if (response.success) {
                    currentTaskId = response.data.task_id;
                    debugLog('Task ID re√ßu:', currentTaskId);
                    updateStatusText('G√©n√©ration d√©marr√©e avec protection anti-boucle...');
                    updateProgress(25);
                    
                    // Afficher message de protection
                    showProtectionInfo();
                    
                    // Commencer √† v√©rifier le statut
                    startStatusCheck();
                } else {
                    debugLog('Erreur de g√©n√©ration:', response.data);
                    showError('Erreur: ' + response.data);
                    hideGenerationStatus();
                    toggleFormState(true);
                }
            })
            .fail(function(xhr, status, error) {
                debugLog('Erreur AJAX:', {xhr, status, error});
                showError('Erreur de connexion - Veuillez r√©essayer');
                hideGenerationStatus();
                toggleFormState(true);
            });
    });
    
    function startStatusCheck() {
        if (!currentTaskId) return;
        
        debugLog('D√©marrage v√©rification statut avec protection anti-boucle');
        updateStatusText('Traitement en cours...');
        updateProgress(50);
        
        statusCheckInterval = setInterval(function() {
            checkMusicStatus();
        }, 5000); // V√©rifier toutes les 5 secondes (optimis√© v1.10.4)
    }
    
    function checkMusicStatus() {
        if (!currentTaskId) {
            stopStatusCheck();
            return;
        }
        
        // PROTECTION ANTI-BOUCLE v1.10.4
        checkCount++;
        updateProtectionCounter(checkCount);
        
        debugLog(`V√©rification ${checkCount}/${maxChecks}`, currentTaskId);
        
        if (checkCount >= maxChecks) {
            debugLog('Protection anti-boucle activ√©e - Maximum de v√©rifications atteint');
            showProtectionTriggered();
            stopStatusCheck();
            return;
        }
        
        // Changer l'apparence visuelle selon le nombre de v√©rifications
        if (checkCount >= 15) {
            $('.protection-counter').addClass('counter-danger');
        } else if (checkCount >= 10) {
            $('.protection-counter').addClass('counter-warning');
        }
        
        $.post(suno_ajax.ajax_url, {
            action: 'check_music_status',
            nonce: suno_ajax.nonce,
            task_id: currentTaskId,
            check_count: checkCount
        })
        .done(function(response) {
            if (response.success) {
                const data = response.data;
                const status = data.status;
                
                debugLog(`Statut re√ßu: ${status}`, data);
                
                // V√©rifier si la protection anti-boucle a √©t√© d√©clench√©e c√¥t√© serveur
                if (data.anti_loop_triggered) {
                    debugLog('Protection anti-boucle d√©clench√©e c√¥t√© serveur');
                    showProtectionTriggered();
                    stopStatusCheck();
                    return;
                }
                
                switch(status) {
                    case 'processing':
                    case 'queued':
                    case 'pending':
                        updateStatusText(`G√©n√©ration en cours... (${checkCount}/${maxChecks})`);
                        updateProgress(Math.min(75, 50 + (checkCount * 2)));
                        break;
                        
                    case 'completed':
                        debugLog('G√©n√©ration termin√©e avec succ√®s');
                        updateStatusText('Termin√© !');
                        updateProgress(100);
                        setTimeout(() => {
                            showResult(data);
                            stopStatusCheck();
                            $(document).trigger('generation-complete');
                        }, 1000);
                        break;
                        
                    case 'failed':
                        debugLog('G√©n√©ration √©chou√©e');
                        showError('La g√©n√©ration a √©chou√©');
                        stopStatusCheck();
                        break;
                        
                    default:
                        updateStatusText(`Statut: ${status} (${checkCount}/${maxChecks})`);
                        break;
                }
            } else {
                debugLog('Erreur de v√©rification:', response.data);
                // Ne pas arr√™ter compl√®tement, continuer √† v√©rifier
                updateStatusText(`V√©rification... (${checkCount}/${maxChecks})`);
            }
        })
        .fail(function(xhr, status, error) {
            debugLog('Erreur de connexion lors de la v√©rification:', {xhr, status, error});
            // En cas d'erreur r√©seau, continuer √† essayer mais informer l'utilisateur
            updateStatusText(`Connexion... (${checkCount}/${maxChecks})`);
        });
    }
    
    function stopStatusCheck() {
        if (statusCheckInterval) {
            clearInterval(statusCheckInterval);
            statusCheckInterval = null;
        }
        hideGenerationStatus();
        toggleFormState(true);
        currentTaskId = null;
        checkCount = 0;
    }
    
    function showGenerationStatus() {
        $('#generation-status').fadeIn();
        $('#generation-result').hide();
        updateProgress(0);
    }
    
    function hideGenerationStatus() {
        $('#generation-status').fadeOut();
    }
    
    function updateStatusText(text) {
        $('#status-text').text(text);
    }
    
    function updateProgress(percent) {
        $('.progress-fill').css('width', percent + '%');
        
        // Changer la couleur selon la protection
        if (checkCount >= 15) {
            $('.progress-fill').addClass('progress-danger');
        } else if (checkCount >= 10) {
            $('.progress-fill').addClass('progress-warning');
        } else {
            $('.progress-fill').addClass('progress-protection');
        }
    }
    
    // Nouvelle fonction v1.10.4 : Compteur de protection
    function updateProtectionCounter(count) {
        if (!$('#check-count').length) return;
        
        $('#check-count').text(count);
        
        // Mettre √† jour l'apparence visuelle
        const counter = $('.protection-counter');
        counter.removeClass('counter-warning counter-danger');
        
        if (count >= 15) {
            counter.addClass('counter-danger');
        } else if (count >= 10) {
            counter.addClass('counter-warning');
        }
    }
    
    // Nouvelle fonction v1.10.4 : Info de protection
    function showProtectionInfo() {
        if ($('.protection-alert').length === 0) {
            const protectionHtml = `
                <div class="protection-alert">
                    <strong>Protection activ√©e :</strong> Maximum ${maxChecks} v√©rifications pour prot√©ger vos cr√©dits API.
                </div>
            `;
            $('#generation-status').prepend(protectionHtml);
        }
    }
    
    // Nouvelle fonction v1.10.4 : Protection d√©clench√©e
    function showProtectionTriggered() {
        const protectionHtml = `
            <div class="result-content">
                <h4>üõ°Ô∏è Protection anti-boucle activ√©e</h4>
                <div class="success-message">
                    <div>
                        <strong>Vos cr√©dits sont prot√©g√©s !</strong><br>
                        La g√©n√©ration a √©t√© automatiquement termin√©e apr√®s ${maxChecks} v√©rifications.<br>
                        <em>Cette protection √©vite les consommations excessives de cr√©dits API.</em>
                    </div>
                </div>
                
                <div class="result-actions">
                    <button onclick="checkCompletedGeneration('${currentTaskId}')" class="suno-btn suno-btn-secondary">
                        üîç V√©rifier si termin√©e
                    </button>
                    <button onclick="location.reload()" class="suno-btn suno-btn-primary">
                        üéµ Nouvelle g√©n√©ration
                    </button>
                </div>
                
                <div class="info-message">
                    <div>
                        <strong>Que faire maintenant ?</strong><br>
                        ‚Ä¢ Attendez quelques minutes et cliquez sur "V√©rifier si termin√©e"<br>
                        ‚Ä¢ Ou d√©marrez une nouvelle g√©n√©ration<br>
                        ‚Ä¢ La protection a √©conomis√© vos cr√©dits API
                    </div>
                </div>
            </div>
        `;
        
        $('#generation-result').html(protectionHtml).fadeIn();
    }
    
    // Nouvelle fonction v1.10.4 : V√©rifier g√©n√©ration termin√©e
    window.checkCompletedGeneration = function(taskId) {
        debugLog('V√©rification manuelle de g√©n√©ration termin√©e');
        
        $.post(suno_ajax.ajax_url, {
            action: 'check_music_status',
            nonce: suno_ajax.nonce,
            task_id: taskId,
            check_count: 0, // Reset pour v√©rification manuelle
            manual_check: true
        })
        .done(function(response) {
            if (response.success && response.data.status === 'completed') {
                debugLog('G√©n√©ration trouv√©e termin√©e lors de la v√©rification manuelle');
                showResult(response.data);
            } else {
                showInfo('La g√©n√©ration est encore en cours. R√©essayez dans quelques minutes.');
            }
        })
        .fail(function() {
            showError('Erreur lors de la v√©rification. R√©essayez plus tard.');
        });
    };
    
    function showResult(data) {
        const resultHtml = `
            <div class="result-content">
                <h4>üéâ Votre chanson est pr√™te !</h4>
                
                ${data.audio_url ? `
                    <div class="audio-player">
                        <audio controls autoplay>
                            <source src="${data.audio_url}" type="audio/mpeg">
                            Votre navigateur ne supporte pas l'√©l√©ment audio.
                        </audio>
                    </div>
                ` : ''}
                
                ${data.image_url ? `
                    <div class="track-artwork">
                        <img src="${data.image_url}" alt="Artwork" />
                    </div>
                ` : ''}
                
                <div class="success-message">
                    <div>
                        <strong>‚úÖ Succ√®s avec protection v1.10.4 !</strong><br>
                        G√©n√©ration termin√©e en ${checkCount} v√©rifications (limite: ${maxChecks})<br>
                        <em>Vos cr√©dits API ont √©t√© pr√©serv√©s.</em>
                    </div>
                </div>
                
                <div class="result-actions">
                    ${data.audio_url ? `
                        <a href="${data.audio_url}" download class="suno-btn suno-btn-secondary">
                            üì• T√©l√©charger
                        </a>
                    ` : ''}
                    
                    <button onclick="location.reload()" class="suno-btn suno-btn-primary">
                        üéµ Cr√©er une nouvelle chanson
                    </button>
                </div>
                
                <div class="social-share">
                    <p>Partager votre cr√©ation :</p>
                    <div class="share-buttons">
                        <button onclick="shareOnTwitter('${data.audio_url}')" class="share-btn twitter">
                            üê¶ Twitter
                        </button>
                        <button onclick="shareOnFacebook('${data.audio_url}')" class="share-btn facebook">
                            üìò Facebook
                        </button>
                        <button onclick="copyToClipboard('${data.audio_url}')" class="share-btn copy">
                            üìã Copier le lien
                        </button>
                    </div>
                </div>
            </div>
        `;
        
        $('#generation-result').html(resultHtml).fadeIn();
        hideGenerationStatus();
    }
    
    function showError(message) {
        const errorHtml = `
            <div class="error-content">
                <h4>‚ùå Erreur</h4>
                <div class="error-message">
                    <div>${message}</div>
                </div>
                <div class="result-actions">
                    <button onclick="location.reload()" class="suno-btn suno-btn-primary">
                        üîÑ R√©essayer
                    </button>
                </div>
            </div>
        `;
        
        $('#generation-result').html(errorHtml).fadeIn();
    }
    
    function showInfo(message) {
        const infoHtml = `
            <div class="info-content">
                <div class="info-message">
                    <div>${message}</div>
                </div>
            </div>
        `;
        
        $('#generation-result').html(infoHtml).fadeIn();
    }
    
    function showValidationError(message) {
        const errorDiv = $('<div class="error-message validation-error" style="margin: 1rem 0;"><div>' + message + '</div></div>');
        $('#music-generation-form').prepend(errorDiv);
        
        // Supprimer apr√®s 5 secondes
        setTimeout(() => {
            errorDiv.fadeOut(() => errorDiv.remove());
        }, 5000);
        
        // Faire d√©filer vers l'erreur
        $('html, body').animate({
            scrollTop: errorDiv.offset().top - 100
        }, 500);
    }
    
    function toggleFormState(enabled) {
        $('#music-generation-form input, #music-generation-form textarea, #music-generation-form select, #music-generation-form button')
            .prop('disabled', !enabled);
    }
    
    // Fonctions de partage social am√©lior√©es
    window.shareOnTwitter = function(audioUrl) {
        const text = "J'ai cr√©√© cette chanson avec l'IA Suno ! üéµ (Plugin WordPress v1.10.4 avec protection anti-boucle)";
        const hashtags = "IA,Suno,WordPress,Musique";
        const url = `https://twitter.com/intent/tweet?text=${encodeURIComponent(text)}&url=${encodeURIComponent(audioUrl)}&hashtags=${hashtags}`;
        window.open(url, '_blank', 'width=550,height=420');
    };
    
    window.shareOnFacebook = function(audioUrl) {
        const url = `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(audioUrl)}`;
        window.open(url, '_blank', 'width=580,height=296');
    };
    
    window.copyToClipboard = function(text) {
        navigator.clipboard.writeText(text).then(function() {
            showTemporaryMessage('‚úÖ Lien copi√© dans le presse-papiers !', 'success');
        }).catch(function(err) {
            debugLog('Erreur de copie:', err);
            // Fallback pour les navigateurs plus anciens
            const textArea = document.createElement('textarea');
            textArea.value = text;
            textArea.style.position = 'fixed';
            textArea.style.opacity = '0';
            document.body.appendChild(textArea);
            textArea.select();
            document.execCommand('copy');
            document.body.removeChild(textArea);
            showTemporaryMessage('‚úÖ Lien copi√© !', 'success');
        });
    };
    
    // Nouvelle fonction : Messages temporaires
    function showTemporaryMessage(message, type = 'info') {
        const messageClass = type === 'success' ? 'success-message' : 
                           type === 'error' ? 'error-message' : 'info-message';
        
        const messageDiv = $(`<div class="${messageClass} temporary-message" style="position: fixed; top: 20px; right: 20px; z-index: 9999; max-width: 300px;"><div>${message}</div></div>`);
        
        $('body').append(messageDiv);
        
        setTimeout(() => {
            messageDiv.fadeOut(() => messageDiv.remove());
        }, 3000);
    }
    
    // Auto-resize des textareas am√©lior√©
    $('textarea').on('input', function() {
        this.style.height = 'auto';
        this.style.height = Math.max(this.scrollHeight, 100) + 'px';
    });
    
    // Compteur de caract√®res am√©lior√© pour le prompt
    $('#music-prompt').on('input', function() {
        const length = $(this).val().length;
        const maxLength = 500;
        
        if (!$('#char-counter').length) {
            $(this).after('<div id="char-counter" class="char-counter"></div>');
        }
        
        const remaining = maxLength - length;
        const counterText = remaining >= 0 ? 
            `${length}/${maxLength} caract√®res (${remaining} restants)` :
            `${length}/${maxLength} caract√®res (${Math.abs(remaining)} en trop !)`;
        
        $('#char-counter').text(counterText);
        
        if (length > maxLength) {
            $('#char-counter').addClass('over-limit');
        } else {
            $('#char-counter').removeClass('over-limit');
        }
    });
    
    // Suggestions de prompts am√©lior√©es v1.10.4
    const promptSuggestions = [
        "Une ballade pop m√©lancolique sur l'amour perdu",
        "Un morceau rock √©nergique pour motiver",
        "Une chanson √©lectronique dansante pour l'√©t√©",
        "Une m√©lodie jazz relaxante pour le soir",
        "Un rap inspirant sur la pers√©v√©rance",
        "Une chanson folk acoustique sur la nature",
        "Un hymne pop pour c√©l√©brer l'amiti√©",
        "Une berceuse douce et apaisante",
        "Un blues m√©lancolique au piano",
        "Une chanson country sur la route"
    ];
    
    // Ajouter les suggestions avec animation
    if ($('#music-prompt').length) {
        const suggestionsHtml = `
            <div class="prompt-suggestions">
                <p>üí° Suggestions d'id√©es (cliquez pour utiliser) :</p>
                <div class="suggestions-list">
                    ${promptSuggestions.map((suggestion, index) => 
                        `<button type="button" class="suggestion-btn" data-suggestion="${suggestion}" style="animation-delay: ${index * 0.1}s">${suggestion}</button>`
                    ).join('')}
                </div>
            </div>
        `;
        
        $('#music-prompt').after(suggestionsHtml);
        
        // G√©rer les clics sur les suggestions avec feedback
        $('.suggestion-btn').on('click', function() {
            const suggestion = $(this).data('suggestion');
            $('#music-prompt').val(suggestion).trigger('input');
            
            // Feedback visuel
            $(this).addClass('selected');
            setTimeout(() => $(this).removeClass('selected'), 1000);
            
            showTemporaryMessage('üí° Suggestion appliqu√©e !', 'success');
        });
    }
    
    // Sauvegarde automatique am√©lior√©e
    const STORAGE_KEY = 'suno_music_draft_v1104';
    
    function saveDraft() {
        const draft = {
            prompt: $('#music-prompt').val(),
            style: $('#music-style').val(),
            title: $('#music-title').val(),
            lyrics: $('#music-lyrics').val(),
            instrumental: $('#instrumental').is(':checked'),
            timestamp: Date.now(),
            version: '1.10.4'
        };
        
        try {
            localStorage.setItem(STORAGE_KEY, JSON.stringify(draft));
            debugLog('Brouillon sauvegard√©');
        } catch (e) {
            debugLog('Erreur de sauvegarde du brouillon:', e);
        }
    }
    
    function loadDraft() {
        try {
            const draft = localStorage.getItem(STORAGE_KEY);
            if (draft) {
                const data = JSON.parse(draft);
                
                // V√©rifier que le brouillon n'est pas trop ancien (24h)
                if (data.timestamp && (Date.now() - data.timestamp) > 24 * 60 * 60 * 1000) {
                    localStorage.removeItem(STORAGE_KEY);
                    debugLog('Brouillon expir√© supprim√©');
                    return;
                }
                
                $('#music-prompt').val(data.prompt || '');
                $('#music-style').val(data.style || '');
                $('#music-title').val(data.title || '');
                $('#music-lyrics').val(data.lyrics || '');
                $('#instrumental').prop('checked', data.instrumental || false);
                
                debugLog('Brouillon charg√©', data);
                
                if (data.prompt) {
                    showTemporaryMessage('üìù Brouillon restaur√©', 'info');
                }
            }
        } catch (e) {
            debugLog('Erreur de chargement du brouillon:', e);
            localStorage.removeItem(STORAGE_KEY);
        }
    }
    
    // Charger le brouillon au d√©marrage
    loadDraft();
    
    // Sauvegarder automatiquement avec d√©bounce
    let saveTimeout;
    $('#music-generation-form input, #music-generation-form textarea, #music-generation-form select').on('input change', function() {
        clearTimeout(saveTimeout);
        saveTimeout = setTimeout(saveDraft, 1000); // Attendre 1 seconde apr√®s la derni√®re modification
    });
    
    // Nettoyer le brouillon apr√®s g√©n√©ration r√©ussie
    $(document).on('generation-complete', function() {
        localStorage.removeItem(STORAGE_KEY);
        debugLog('Brouillon nettoy√© apr√®s g√©n√©ration r√©ussie');
    });
    
    // Gestion des erreurs globales JavaScript
    window.addEventListener('error', function(e) {
        debugLog('Erreur JavaScript globale:', {
            message: e.message,
            filename: e.filename,
            lineno: e.lineno,
            colno: e.colno
        });
    });
    
    // Information sur la version au chargement
    if (window.console && console.info) {
        console.info('üéµ Suno Music Generator v1.10.4 charg√© avec succ√®s');
        console.info('üõ°Ô∏è Protection anti-boucle active (max 20 v√©rifications)');
        console.info('üíæ Sauvegarde automatique des brouillons activ√©e');
        console.info('üì± Interface responsive et accessible');
    }
});